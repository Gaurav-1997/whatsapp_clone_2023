// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

enum ChatType {
  PRIVATE
  GROUP
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
}

enum MessageDeliveryStatus {
  SENT
  SEEN
  READ
}

model User {
  id                  Int        @id
  email               String     @unique
  name                String
  profilePicture      String?    @default("")
  about               String?    @default("")
  status              String?    @default("")
  friends             Int[]
  blockedUsers        Int[]
  pendingRequest      Int[]
  requestSentTo       Int[]
  messages            Messages[] @relation("sentMessages")
  chat                Chat[]     @relation("chatUser")
  last_message_sender Chat?
  // groupParticipant    GroupParticipant @relation(fields: [groupParticipant_id], references: [group_id])
  // groupParticipant_id Int?
}

model Chat {
  chat_id                String    @id @default(cuid())
  type                   ChatType  @default(PRIVATE)
  // sender_id    Int
  admin_email            String?   @unique
  group_chat_name        String?
  chatUser               User[]    @relation("chatUser")
  last_message           Messages? @relation("lastMessage")
  last_message_sender    User?     @relation(fields: [last_message_sender_id], references: [id])
  last_message_sender_id Int?      @unique
  // groupChat           GroupParticipant
}

model Messages {
  id            String                @id @default(uuid())
  sender        User                  @relation("sentMessages", fields: [senderId], references: [id])
  senderId      Int
  type          MessageType           @default(TEXT)
  content       String
  messageStatus MessageDeliveryStatus @default(SENT)
  seen_by       Int[]
  sent_at       DateTime              @default(now())
  chat          Chat?                 @relation("lastMessage", fields: [chatId], references: [chat_id])
  chatId        String                @unique @default("_989_")
}

// Group Participants Table
// model GroupParticipant {
//   group_id   Int    @id
//   group_name String
//   groupAdmin String
//   chat       Chat   @relation("groupChat", fields: [chat_id], references: [chat_id])
//   chat_id    String @unique
//   user       User[]
// }
