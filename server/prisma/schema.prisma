// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

enum ChatType {
  PRIVATE
  GROUP
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
}

enum MessageDeliveryStatus {
  SENT
  SEEN
  READ
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  SAD
  ANGRY
  WOW
}

model User {
  id                     Int        @id
  email                  String     @unique
  name                   String
  profilePicture         String?    @default("")
  about                  String?    @default("")
  status                 String?    @default("")
  blockedUsers           Int[]
  requestSentTo          Int[]
  messages               Messages[] @relation("sentMessages")
  chat                   Chat[]     @relation("chatUser")
  // last_message_sender    Chat?      @relation("last_message_sender")
  // groupParticipant    GroupParticipant @relation(fields: [groupParticipant_id], references: [group_id])
  // groupParticipant_id Int?
  friends                User[]     @relation("friends")
  friendsRelation        User[]     @relation("friends")
  pendingRequest         User[]     @relation("pendingRequest")
  pendingRequestRelation User[]     @relation("pendingRequest")
}

model Chat {
  chat_id                String                 @id @default(cuid())
  type                   ChatType               @default(PRIVATE)
  admin_email            String?                @unique
  group_chat_name        String?
  chatUser               User[]                 @relation("chatUser")
  last_message           String?
  // last_message_sender    User?     @relation("last_message_sender",fields: [last_message_sender_id], references: [id])
  last_message_sender_id Int?
  unread_message_count   Int?                   @default(0)
  last_message_status    MessageDeliveryStatus? @default(SENT)
  pinnedMessage          String?
  pinnedMessageId        String?
  // groupChat           GroupParticipant
  messagesId             String?
}

model Messages {
  id                   String                @id @default(uuid())
  sender               User                  @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId             Int
  type                 MessageType           @default(TEXT)
  content              String
  messageStatus        MessageDeliveryStatus @default(SENT)
  seen_by              Int[]
  sent_at              DateTime              @default(now())
  chatId               String?
  parentMessageId      String?
  parentMessageContent String?
  repliedByUserId      String?
  reactions            MessageReaction[]
  isEdited             Boolean?
  editedAt             DateTime?
}

model MessageReaction {
  id                String       @id @default(uuid())
  parentMessage     Messages     @relation(fields: [parentMessageId], references: [id], onDelete: Cascade)
  parentMessageId   String
  reactionType      ReactionType
  reactedByUserName String
  reactedAt         DateTime     @default(now())
}

// Group Participants Table
// model GroupParticipant {
//   group_id   Int    @id
//   group_name String
//   groupAdmin String
//   chat       Chat   @relation("groupChat", fields: [chat_id], references: [chat_id])
//   chat_id    String @unique
//   user       User[]
// }
